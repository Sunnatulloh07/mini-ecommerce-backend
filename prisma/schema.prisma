generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  orders    Order[]
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
}

model Product {
  id          String              @id @default(uuid())
  title       String
  price       Float
  image       String
  description String
  isActive    Boolean             @default(true)
  isDeleted   Boolean             @default(false)
  orderItems  OrderItem[]
  categories  ProductOnCategory[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@index([title])
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  totalPrice Float
  status     String
  isDeleted  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  User       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  Payment    Payment?

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Category {
  id          String              @id @default(uuid())
  name        String
  description String?
  products    ProductOnCategory[]

  @@index([name])
}

model ProductOnCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
  @@index([categoryId])
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  amount        Float
  paymentMethod String        
  transactionId String?       
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
  
  @@index([status])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Role {
  ADMIN
  USER
}
